@page "/reservations/details"
@using Microsoft.EntityFrameworkCore
@using Сoursework.Models
@inject IDbContextFactory<Сoursework.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details Reservation</PageTitle>

<h1>Подробнее</h1>

<div>
    <h2>Бронирование</h2>
    <hr />
    @if (reservation is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Гость</dt>
            <dd class="col-sm-10">@reservation.GuestName</dd>
            <dt class="col-sm-2">Номер</dt>
            <dd class="col-sm-10">@reservation.RommNumber</dd>
            <dt class="col-sm-2">Услуга</dt>
            <dd class="col-sm-10">@reservation.Servicename</dd>
            <dt class="col-sm-2">Дата заезда</dt>
            <dd class="col-sm-10">@reservation.StartDate?.ToString("dd-MM-yyyy")</dd>
            <dt class="col-sm-2">Дата выезда</dt>
            <dd class="col-sm-10">@reservation.EndDate?.ToString("dd-MM-yyyy")</dd>
            <dt class="col-sm-2">Статус</dt>
            <dd class="col-sm-10">@reservation.BookingStatus</dd>
        </dl>
        <div>
            <a href="@($"/reservations/edit?bookingid={reservation.BookingId}")">Редактировать</a> |
            <a href="@($"/reservations")">Назад к списку</a>
        </div>
    }
</div>

@code {
    private ReservationDto? reservation;

    [SupplyParameterFromQuery]
    private int BookingId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        reservation = await context.Reservations
                    .Include(d => d.Guests) // Загружаем связанные данные
            .Include(d => d.Rooms)
            .Include(d => d.Services)
            .Select(d => new ReservationDto
                {
                    BookingId = d.BookingId,
                    GuestName = $"{d.Guests.Surname} {d.Guests.Name} {d.Guests.Middlename}",
                    RommNumber = d.Rooms.RommNumber,
                    Servicename = d.Services.Name,
                    StartDate = d.StartDate,
                    EndDate = d.EndDate,
                    BookingStatus = d.BookingStatus
                })
    .FirstOrDefaultAsync(m => m.BookingId == BookingId);



        if (reservation is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
    public class ReservationDto
    {
        public int BookingId { get; set; }
        public string? GuestName { get; set; }
        public int RommNumber { get; set; }
        public string? Servicename { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string? BookingStatus { get; set; }

    }
}
