@page "/services/details"
@using Microsoft.EntityFrameworkCore
@using Сoursework.Models
@inject IDbContextFactory<Сoursework.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details Service</PageTitle>

<h1>Подробнее</h1>

<div>
    <h2>Услуга</h2>
    <hr />
    @if (service is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Название</dt>
            <dd class="col-sm-10">@service.Name</dd>
            <dt class="col-sm-2">Стоимость</dt>
            <dd class="col-sm-10">@service.Price</dd>
            <dt class="col-sm-2">Описание</dt>
            <dd class="col-sm-10">@service.Description</dd>
        </dl>
        <div>
            <a href="@($"/services/edit?serviceid={service.ServiceId}")">Редактировать</a> |
            <a href="@($"/services")">Назад к списку</a>
        </div>
    }
</div>

@code {
    private Service? service;

    [SupplyParameterFromQuery]
    private int ServiceId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        service = await context.Services.FirstOrDefaultAsync(m => m.ServiceId == ServiceId);

        if (service is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
