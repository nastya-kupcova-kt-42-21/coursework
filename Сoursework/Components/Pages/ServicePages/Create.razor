@page "/services/create"
@using Microsoft.EntityFrameworkCore
@using Сoursework.Models
@inject IDbContextFactory<Сoursework.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create Service</PageTitle>

<h1>Добавление</h1>

<h2>Услуга</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Service" OnValidSubmit="AddService" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Название:</label>
                <InputText id="name" @bind-Value="Service.Name" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Service.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="price" class="form-label">Стоимость:</label>
                <InputNumber id="price" @bind-Value="Service.Price" class="form-control" /> 
                <ValidationMessage For="() => Service.Price" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Описание:</label>
                <InputText id="description" @bind-Value="Service.Description" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Service.Description" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Добавить</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/services">Назад к списку</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Service Service { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddService()
    {
        using var context = DbFactory.CreateDbContext();
        context.Services.Add(Service);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/services");
    }
}
