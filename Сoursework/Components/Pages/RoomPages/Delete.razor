@page "/rooms/delete"
@using Microsoft.EntityFrameworkCore
@using Сoursework.Models
@inject IDbContextFactory<Сoursework.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Room</PageTitle>

<h1>Удаление</h1>

<p>Вы действительно хотите удалить?</p>
<div>
    <h2>Номер</h2>
    <hr />
    @if (room is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">№</dt>
            <dd class="col-sm-10">@room.RommNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Тип</dt>
            <dd class="col-sm-10">@room.RoomType</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Макс. количество гостей</dt>
            <dd class="col-sm-10">@room.MaxGuests</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Цена за ночь</dt>
            <dd class="col-sm-10">@room.PriceForNight</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Доступнсть</dt>
            <dd class="col-sm-10">@room.Availability</dd>
        </dl>
        <EditForm method="post" Model="room" OnValidSubmit="DeleteRoom" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(room is null)">Удалить</button> |
            <a href="/rooms">Назад к списку</a>
        </EditForm>
    }
</div>

@code {
    private Room? room;

    [SupplyParameterFromQuery]
    private int RoomId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        room = await context.Rooms.FirstOrDefaultAsync(m => m.RoomId == RoomId);

        if (room is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteRoom()
    {
        using var context = DbFactory.CreateDbContext();
        context.Rooms.Remove(room!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/rooms");
    }
}
