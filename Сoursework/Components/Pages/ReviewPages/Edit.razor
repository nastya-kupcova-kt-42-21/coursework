@page "/reviews/edit"
@using Microsoft.EntityFrameworkCore
@using Сoursework.Models
@inject IDbContextFactory<Сoursework.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Review</PageTitle>

<h1>Редактирование</h1>

<h2>Отзыв</h2>
<hr />
@if (Review is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Review" OnValidSubmit="UpdateReview" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Review.ReviewId" value="@Review.ReviewId" />
                <div class="mb-3">
                    <label for="guestid" class="form-label">Гость:</label>
                    <InputSelect id="guestid" @bind-Value="Review.GuestId" class="form-control">
                                        @foreach (var guest in Guests)
                    {
                    <option value="@guest.GuestId">@($"{guest.Surname} {guest.Name} {guest.Middlename}")</option>
                    }
                    </InputSelect>
                    <ValidationMessage For="() => Review.GuestId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="roomid" class="form-label">Номер:</label>
                    <InputSelect id="roomid" @bind-Value="Review.RoomId" class="form-control" >
                        @foreach (var room in Rooms)
                        {
                            <option value="@room.RoomId">@room.RommNumber</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Review.RoomId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="rating" class="form-label">Оценка:</label>
                    <InputNumber id="rating" @bind-Value="Review.Rating" class="form-control" />
                    <ValidationMessage For="() => Review.Rating" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="comment" class="form-label">Комментарий:</label>
                    <InputText id="comment" @bind-Value="Review.Comment" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Review.Comment" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="reviewdate" class="form-label">Дата отзыва:</label>
                    <InputDate id="reviewdate" @bind-Value="Review.ReviewDate" class="form-control" />
                    <ValidationMessage For="() => Review.ReviewDate" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/reviews">Назад к списку</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ReviewId { get; set; }

    [SupplyParameterFromForm]
    private Review? Review { get; set; }
    private List<Guest> Guests { get; set; } = new();
    private List<Room> Rooms { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        //Review ??= await context.Reviews.FirstOrDefaultAsync(m => m.ReviewId == ReviewId);
        Review = await context.Reviews
        .Include(d => d.Guests)
        .Include(d => d.Rooms)
        .FirstOrDefaultAsync(m => m.ReviewId == ReviewId);

        if (Review is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        // Загрузим списки для выбора
        Guests = await context.Guests.ToListAsync();
        Rooms = await context.Rooms.ToListAsync();
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateReview()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Review!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ReviewExists(Review!.ReviewId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/reviews");
    }

    private bool ReviewExists(int reviewid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Reviews.Any(e => e.ReviewId == reviewid);
    }
}
