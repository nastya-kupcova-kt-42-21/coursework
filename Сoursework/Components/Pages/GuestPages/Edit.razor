@page "/guests/edit"
@using Microsoft.EntityFrameworkCore
@using Сoursework.Models
@inject IDbContextFactory<Сoursework.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Guest</PageTitle>

<h1>Редактирование</h1>

<h2>Гость</h2>
<hr />
@if (Guest is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Guest" OnValidSubmit="UpdateGuest" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Guest.GuestId" value="@Guest.GuestId" />
                <div class="mb-3">
                    <label for="surname" class="form-label">Фамилия:</label>
                    <InputText id="surname" @bind-Value="Guest.Surname" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Guest.Surname" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Имя:</label>
                    <InputText id="name" @bind-Value="Guest.Name" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Guest.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="middlename" class="form-label">Отчество:</label>
                    <InputText id="middlename" @bind-Value="Guest.Middlename" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Guest.Middlename" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Электронная почта:</label>
                    <InputText id="email" @bind-Value="Guest.Email" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Guest.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phone" class="form-label">Телефон:</label>
                    <InputText id="phone" @bind-Value="Guest.Phone" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Guest.Phone" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateofbirth" class="form-label">Дата рождения:</label>
                    <InputDate id="dateofbirth" @bind-Value="Guest.DateofBirth" class="form-control" />
                    <ValidationMessage For="() => Guest.DateofBirth" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/guests">Назад к списку</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int GuestId { get; set; }

    [SupplyParameterFromForm]
    private Guest? Guest { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Guest ??= await context.Guests.FirstOrDefaultAsync(m => m.GuestId == GuestId);

        if (Guest is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateGuest()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Guest!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!GuestExists(Guest!.GuestId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/guests");
    }

    private bool GuestExists(int guestid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Guests.Any(e => e.GuestId == guestid);
    }
}
